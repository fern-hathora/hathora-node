/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { HathoraApi } from "@fern-api/hathora";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.HathoraApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    public async create(
        appId: HathoraApi.AppId,
        request: HathoraApi.CreateRoomRequest
    ): Promise<HathoraApi.CreateRoomResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("region", request.region);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HathoraApiEnvironment.Production,
                `/rooms/create/${appId}`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.room.create.Response.parse(_response.body as serializers.room.create.Response.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HathoraApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HathoraApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HathoraApiTimeoutError();
            case "unknown":
                throw new errors.HathoraApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async connect(
        appId: HathoraApi.AppId,
        roomId: HathoraApi.RoomId
    ): Promise<HathoraApi.ConnectToRoomResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HathoraApiEnvironment.Production,
                `/rooms/connect/${appId}/${roomId}`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.room.connect.Response.parse(
                _response.body as serializers.room.connect.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HathoraApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HathoraApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HathoraApiTimeoutError();
            case "unknown":
                throw new errors.HathoraApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async suspend(appId: HathoraApi.AppId, roomId: HathoraApi.RoomId): Promise<HathoraApi.SuspendRoomResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HathoraApiEnvironment.Production,
                `/rooms/suspense/${appId}/${roomId}`
            ),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.room.suspend.Response.parse(
                _response.body as serializers.room.suspend.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HathoraApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HathoraApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HathoraApiTimeoutError();
            case "unknown":
                throw new errors.HathoraApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async destroy(appId: HathoraApi.AppId, roomId: HathoraApi.RoomId): Promise<HathoraApi.DestroyRoomResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.HathoraApiEnvironment.Production,
                `/rooms/destory/${appId}/${roomId}`
            ),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.room.destroy.Response.parse(
                _response.body as serializers.room.destroy.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.HathoraApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.HathoraApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.HathoraApiTimeoutError();
            case "unknown":
                throw new errors.HathoraApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
