/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../core";
import { HathoraApi } from "@fern-api/hathora";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment: string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async get(appName: HathoraApi.AppName): Promise<HathoraApi.app.get.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment, `/app/${appName}/`),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.app.get.Response.parse(_response.body as serializers.app.get.Response.Raw),
      };
    }

    return {
      ok: false,
      error: HathoraApi.app.get.Error._unknown(_response.error),
    };
  }

  public async logs(appName: HathoraApi.AppName): Promise<HathoraApi.app.logs.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment, `/app/${appName}/logs`),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.app.logs.Response.parse(_response.body as serializers.app.logs.Response.Raw),
      };
    }

    return {
      ok: false,
      error: HathoraApi.app.logs.Error._unknown(_response.error),
    };
  }

  public async delete(
    appName: HathoraApi.AppName,
    request?: HathoraApi.GetAppRequest
  ): Promise<HathoraApi.app.delete.Response> {
    const _queryParams = new URLSearchParams();
    if (request?.forceDestroy != null) {
      _queryParams.append("forceDestroy", request?.forceDestroy.toString());
    }

    const _response = await core.fetcher({
      url: urlJoin(this.options.environment, `/app/${appName}/delete`),
      method: "DELETE",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      queryParameters: _queryParams,
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.app.delete.Response.parse(_response.body as serializers.app.delete.Response.Raw),
      };
    }

    return {
      ok: false,
      error: HathoraApi.app.delete.Error._unknown(_response.error),
    };
  }
}
